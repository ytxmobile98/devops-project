apiVersion: tf.upbound.io/v1beta1
kind: Workspace
metadata:
  name: k3s-3
spec:
  forProvider:
    source: Inline
    module: |
      data "tencentcloud_availability_zones_by_product" "default" {
        product = "cvm"
      }

      # Get availability images
      data "tencentcloud_images" "default" {
        image_type = ["PUBLIC_IMAGE"]
        os_name    = "ubuntu"
      }

      # Get availability instance types
      data "tencentcloud_instance_types" "default" {
        filter {
          name   = "instance-family"
          values = ["S5"]
        }

        cpu_core_count = 4
        memory_size    = 8
      }

      # Create security group
      resource "tencentcloud_security_group" "default" {
        name        = "tf-3-security-group"
        description = "make it accessible for both production and stage ports"
      }

      # Create security group rule allow ssh request
      resource "tencentcloud_security_group_lite_rule" "default" {
        security_group_id = tencentcloud_security_group.default.id
        ingress = [
          "ACCEPT#0.0.0.0/0#22#TCP",
          "ACCEPT#0.0.0.0/0#80#TCP",
          "ACCEPT#0.0.0.0/0#443#TCP",
          "ACCEPT#0.0.0.0/0#6443#TCP",
        ]

        egress = [
          "ACCEPT#0.0.0.0/0#ALL#ALL"
        ]
      }

      # Create a web server
      resource "tencentcloud_instance" "ubuntu" {
        depends_on                 = [tencentcloud_security_group_lite_rule.default]
        count                      = 1
        instance_name              = "devops_hongkong_cvm_3"
        availability_zone          = data.tencentcloud_availability_zones_by_product.default.zones.0.name
        image_id                   = data.tencentcloud_images.default.images.0.image_id
        instance_type              = data.tencentcloud_instance_types.default.instance_types.0.instance_type
        system_disk_type           = "CLOUD_PREMIUM"
        system_disk_size           = 50
        allocate_public_ip         = true
        internet_max_bandwidth_out = 50
        instance_charge_type       = "SPOTPAID"
        orderly_security_groups    = [tencentcloud_security_group.default.id]
        password                   = var.cvm_password
      }

      variable "cvm_password" {
        description = "user ubuntu password"
        type        = string
      }

      variable "cvm_user" {
        description = "user ubuntu"
        type        = string
      }

      module "k3s" {
        source      = "xunleii/k3s/module"
        k3s_version = "v1.28.1+k3s1"

        cidr = {
          pods = "10.88.0.0/16"
          services = "10.89.0.0/16"
        }

        generate_ca_certificates = true
        global_flags = [
          "--tls-san ${tencentcloud_instance.ubuntu[0].public_ip}",
          "--write-kubeconfig-mode 644",
          "--disable=traefik",
          "--kube-controller-manager-arg bind-address=0.0.0.0",
          "--kube-proxy-arg metrics-bind-address=0.0.0.0",
          "--kube-scheduler-arg bind-address=0.0.0.0"
        ]
        k3s_install_env_vars = {}

        servers = {
          "k8s-hongkong-2" = {
            ip = tencentcloud_instance.ubuntu[0].private_ip
            connection = {
              timeout  = "60s"
              type     = "ssh"
              host     = tencentcloud_instance.ubuntu[0].public_ip
              password = var.cvm_password
              user     = var.cvm_user
            }
          }
        }
      }

      resource "null_resource" "connect_ubuntu" {
        depends_on = [module.k3s]
        connection {
          host     = tencentcloud_instance.ubuntu[0].public_ip
          type     = "ssh"
          user     = var.cvm_user
          password = var.cvm_password
        }

        provisioner "remote-exec" {
          inline = [
            "curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash",
            "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml",
            "helm upgrade --install ingress-nginx ingress-nginx --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx --create-namespace --wait",
          ]
        }
      }

      output "kube_config" {
        value = module.k3s.kube_config
        sensitive = true
      }

      output "kubernetes_ready" {
        value = module.k3s.kubernetes_ready
      }

      output "summary" {
        value = module.k3s.summary
      }

      output "public_ip" {
        description = "The public ip of instance."
        value       = tencentcloud_instance.ubuntu[0].public_ip
      }

      output "private_ip" {
        description = "The private ip of instance."
        value       = tencentcloud_instance.ubuntu[0].private_ip
      }
    vars:
      - key: cvm_password
        value: devops123
      - key: cvm_user
        value: ubuntu
